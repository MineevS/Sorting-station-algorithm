
#include "header.h"

#include <iostream>
#include <stack> //Подключаем заголовочный файл стека.
#include <queue> //Подключаем заголовочный файл очереди.
#include <cstring>
#include <typeinfo>

using namespace std;

int main(int argc, char** argv)
{
	const char *token = "a = D(f - b * c + d, !e, g)";
	
	for(size_t i = 0; i < strlen(token); i++)
	{
		cout << token[i] << endl;
		
		
		if(typeid(token[i]) == typeid(int) || typeid(token[i]) == typeid(double) || typeid(token[i]) == typeid(float))
		{ //1.1) ЕСЛИ токен — число, то добавить его в очередь вывода;
			
			
			
		}
		if(typeid(token[i]) == typeid(char))
		{//1.2) ЕСЛИ токен — функция, то добавить его в стек операторов;
			
			
			
		}
		if(typeid(token[i]) == typeid('+'))
		{	
		    /*
			 1.3) ЕСЛИ токен — оператор, то:
				а) ПОКА (на вершине стека операторов функция
					ИЛИ оператор с большим приоритетом, чем у токена
					ИЛИ (оператор с тем же приоритетом, что у токена,
					И токен — левоассоциативный оператор)
					И оператор на вершине стека операторов не ‘(’:
					Достать оператор из стека и переложить в
					очередь;
				б) положить токен на стек операторов;
		    */
			
			
			
		}
		if(token[i] == '(')
		{
			//1.4) ЕСЛИ токен — ‘(’, то добавить его в стек операторов;
			
			
			
		}
		if(token[i] == ')')
		{
			/*
			1.5) ЕСЛИ токен — ‘)’, то:
				ПОКА оператор на вершине стека не ‘(’:
				Достать оператор из стека и переложить в очередь;
				ЕСЛИ стек операторов пуст, ТО:
				Скобки не сбалансированы,
				конец разбора с ошибкой.
				Достать ‘(’ с вершины стека операторов;
			*/
			
			
			
			
			
		}
		
		
		//while()
		{
			/*
			 2) ПОКА стек операторов не пуст:
				ЕСЛИ на вершине стека скобка, ТО:
				Скобки не сбалансированы,
				конец разбора с ошибкой.
			    Достать оператор из стека и переложить в очередь.
			*/
			
			
			
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
	
	
}